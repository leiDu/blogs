<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Universe</title>
    <link>https://leidu.github.io/blogs/post/</link>
    <description>Recent content in Posts on Universe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Jul 2020 18:40:52 +0800</lastBuildDate>
    
	<atom:link href="https://leidu.github.io/blogs/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git</title>
      <link>https://leidu.github.io/blogs/git/</link>
      <pubDate>Mon, 06 Jul 2020 18:40:52 +0800</pubDate>
      
      <guid>https://leidu.github.io/blogs/git/</guid>
      <description>由于在git容器中删除了一个文件，在做提交时始终不能把内容提交到github容器中,以下是错误:
位于分支master 您的分支与上游分支 &#39;origin/master&#39; 一致。 尚未暂存以备提交的变更： （使用 &amp;quot;git add &amp;lt;文件&amp;gt;...&amp;quot; 更新要提交的内容） （使用 &amp;quot;git checkout -- &amp;lt;文件&amp;gt;...&amp;quot; 丢弃工作区的改动） （提交或丢弃子模组中未跟踪或修改的内容） 修改： themes/cupper-hugo-theme (修改的内容) 修改尚未加入提交（使用 &amp;quot;git add&amp;quot; 和/或 &amp;quot;git commit -a&amp;quot;）  原因:修改的地方并未进入到暂缓去，这里是因为删除了一个文件。
解决：
1.git diff
2.git rm &amp;ndash;cached themes/cupper-hugo-theme
3.git commit -m &amp;ldquo;日志内容&amp;rdquo;
4.重新git add .提交
REFERENCE [1] https://blog.csdn.net/ningyanggege/article/details/98878660</description>
    </item>
    
    <item>
      <title>ReplacementAlgorithm</title>
      <link>https://leidu.github.io/blogs/replacementalgorithm/</link>
      <pubDate>Sun, 28 Jun 2020 21:28:09 +0800</pubDate>
      
      <guid>https://leidu.github.io/blogs/replacementalgorithm/</guid>
      <description>引言  进程运行时，若其所要访问的页面不在内存，而需把他们调入内存，但内存已无空闲空间时，为了保证该进程能正常运行，系统必须从内存中调出一页程序和数据送到磁盘的对换区中。这种把选择换出页面的算法称为页面置换算法。
例子  要求使用最佳置换算法，先进先出算法，最近最久置换算法求解置换次数和缺页中断(使用的是三个物理块)
                           7 0 1 2 0 3 0 4 2 3 0 3 2 1 2 0 1 7 0 1    最佳置换算法(Optimal)  这是一种理论上的算法。思想：选择的被淘汰页面是以后永远不使用的，或在很长一段时间内不在被访问的页面。强调未来性。
优点：保证获得最低的缺页率。
缺点：由于未来是不可确定的，造成了一个进程在内存的若干个页面中，哪一个页面是未来最长时间不再被访问的，这是不可预知的，但可以通过该算法去评估其他算法。
解:
                           7 7 7 2  2  2   2   2    7      0 0 0  0  4   0   0    0       1 1  3  3   3   1    1      解法:由于有三个物理块，可以放入三个页面。第一个物理块放入7，第二个物理块放入0，第三个物理块放入1，这时物理块中已没有多余的空间放入页面2，所以需要置换出页面。根据最佳置换算法的思想，置换出以后永远不使用的或很长一段时间不使用的页面。通过查找7,0,1在以后使用的情况来比较分析，7在第18次访问时调入内存中，0在第4次访问时时调入内存，而1则在第12次时访问调入内存，所以得到7在很长一段时间不会使用，把7置换出去，把2调入内存。如果所置换的页面在内存中存在则不进行置换。</description>
    </item>
    
    <item>
      <title>Music Player base on  MUI framework</title>
      <link>https://leidu.github.io/blogs/musicplayer/</link>
      <pubDate>Sun, 21 Jun 2020 18:59:47 +0800</pubDate>
      
      <guid>https://leidu.github.io/blogs/musicplayer/</guid>
      <description>这是一个基于mui框架实现的一个网页随机音乐播放,主要功能有播放与暂停,随机切歌,静音三个。
需求建模  原型界面  设计软件  应用端
Axure RP 网页版
摹客原型     数据模型 业务模型  框架  应用架构
描述IT系统功能和技术实现的内容 分类  C结构
Client,最早的一种初始分类单机结构,不涉及联网的客户端,如单机游戏 S结构
Server,用于网络通信的一种服务结构,使用Socket(套接字)来传输数据,包含TCP和UDP两种协议 C/S结构
Client/Server,一种端应用,原来的APP应用,优点:稳定,功能强大;缺点:更新不及时,跨平台弱 B结构 B/S结构
Browser/Server,一种页应用,直接在网页中进行操作. C/S+B/S混合结构
以C/S为主,B/S为辅的一种结构,如微信小程序,快应用,现代版QQ B/S+C/S混合结构
以B/S为主,C/S为辅的一种结构,如在线直播,在线电影   开发模型
主要是MVC,其中包含MVC 1.0和MVC 2.0,其中MVVP是对MVC的扩展 开发框架  weex quickapp weixin app uniapp mui    跨域与协议   跨域 定义:网页应用中的一种安全机制,域:作用域,网页应用中的ip/主机名/域名
跨域方式:设置头部(request:伪造);设置响应许可(运行那些ip/域名来访问,服务器就做出响应);JSON;webservice
  协议
协议头://host:port/contextroot/path
  跨域的必要条件
协议头不同;主机名不同;IP协议不同;域名不同;端口号不同;上下文根不同</description>
    </item>
    
    <item>
      <title>npm error in nodejs</title>
      <link>https://leidu.github.io/blogs/npmerror/</link>
      <pubDate>Sat, 30 May 2020 22:36:50 +0800</pubDate>
      
      <guid>https://leidu.github.io/blogs/npmerror/</guid>
      <description>Install  英文官网 中文官网  NPM Error  internal/modules/cjs/loader.js:1032 throw err; ^ Error: Cannot find module &#39;/usr/bin/node_modules/npm/bin/npm-cli.js&#39; at Function.Module._resolveFilename (internal/modules/cjs/loader.js:1029:15) at Function.Module._load (internal/modules/cjs/loader.js:898:27) at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:71:12) at internal/main/run_main_module.js:17:47 { code: &#39;MODULE_NOT_FOUND&#39;, requireStack: [] }   原因:因为不是安装在/usr/bin/这个目录下的，引起找不到所要使用的文件。
解决:找到npm执行文件，使用编辑器去修改npm中的basedir路径，使用自己的安装的路径，如/media/un/_dde_data/node/lib/node_modules/npm/bin，但这样还是会报上面的错，只不过错误的路径变成了这个路径，通过报的错误，可以定位到npm-cli.js文件的路径，在npm文件中找到NPM_CLI_JS路径，可以发现npm-cli.js中的$basedir/node_modules/npm/bin/npm-cli.js路径，再看报的错误，可以确定把basedir中多了/node_modules/npm/bin的文件层级，因为在NPM_CLI_JS中已经存在这几个目录，所以basedir=&amp;rdquo;/media/un/_dde_data/node/lin&amp;quot;即可。
Attachment  我使用的是NodeJs 14.3.0 Current Latest Features</description>
    </item>
    
    <item>
      <title>Analysis of value range based on java type</title>
      <link>https://leidu.github.io/blogs/type-value-analysis/</link>
      <pubDate>Tue, 12 May 2020 21:48:09 +0800</pubDate>
      
      <guid>https://leidu.github.io/blogs/type-value-analysis/</guid>
      <description> 求&amp;quot;2^100 % 5&amp;quot;的值，通过分析，需要注意的是在定义时所使用的数据类型，如果定义的数据类型过小，获得的结果就会越界，不能取得正确的结果。
基本类型的取值范围表    类型 存储需求 取值范围     byte 1 -127~128   short 2 -2^15~2^15-1   int 4 -2^31~2^31-1   long 8 -2^63~2^63-1   float 4 -3.40282310^38~3.40282310^38   double 8 -1.797710^308~1.97710^308   char 2    boolean 1 true 或 false    </description>
    </item>
    
    <item>
      <title>Javascript And Image II</title>
      <link>https://leidu.github.io/blogs/javascriptandimg_2/</link>
      <pubDate>Sun, 10 May 2020 22:53:33 +0800</pubDate>
      
      <guid>https://leidu.github.io/blogs/javascriptandimg_2/</guid>
      <description>根据上一次的“基于javaScript&amp;quot;的改变图片，有一定的缺陷，如果浏览器不支持 javaScript会怎么样。而为了更高效的执行代码，现在都采用一个模式——代码分 离，这种模式使代码更高效的执行，也更好的让人阅读。接下来，就是讲解HTML 和javaScript的分离。
html
 ... &amp;lt;div id=&amp;quot;imgs&amp;quot;&amp;gt; &amp;lt;a href=&amp;quot;your image path&amp;quot; title=&amp;quot;your description&amp;quot; /&amp;gt; &amp;lt;a href=&amp;quot;your image path&amp;quot; title=&amp;quot;your description&amp;quot; /&amp;gt; ... &amp;lt;div&amp;gt; &amp;lt;img id=&amp;quot;placeholder&amp;quot; src=&amp;quot;your image path&amp;quot; /&amp;gt; &amp;lt;p id=&amp;quot;description&amp;quot;&amp;gt;description&amp;lt;/p&amp;gt; ...  javaScript 其中的判断语句用于判断浏览器是否支持javaScript。
function grally() { if(!document.getElementsByTagName) return false; if(!document.getElementById) return false; if(!document.getElementById(&amp;quot;imgs&amp;quot;)) return false; var gallery = document.getElementById(&amp;quot;imgs&amp;quot;); var links = gallery.getElementsByTagName(&amp;quot;a&amp;quot;); for(var i = 0; i &amp;lt; links.length; i++) { links[i].onclick = function() { return showPic(this) ?</description>
    </item>
    
    <item>
      <title>Javascript And Image I</title>
      <link>https://leidu.github.io/blogs/javascriptandimg_1/</link>
      <pubDate>Sun, 10 May 2020 22:36:52 +0800</pubDate>
      
      <guid>https://leidu.github.io/blogs/javascriptandimg_1/</guid>
      <description>今天主要研究的是—javaScript图片库,通过点击一条超连接文本，不用跳转直接在 本页面显示图片。这个主要用到了占位符，通过占位符图片替换成自己想要查 看的图片。 思路：
 获取超链接文件的路径
获取占位符图片
把超链接的文件放到占位符图片里
 动态改变图片
 标记 我认为这里的标记在这里是html文件里面所使用的标签。如以下部分代码:   ... &amp;lt;a href=&amp;quot;your image path&amp;quot; title=&amp;quot;your image description&amp;quot; onclick=&amp;quot;showPic(this); return false;&amp;quot;&amp;gt;xxx&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;your image path&amp;quot; title=&amp;quot;your image description&amp;quot; onclick=&amp;quot;showPic(this); return false;&amp;quot;&amp;gt;xxx&amp;lt;/a&amp;gt; ... &amp;lt;img id=&amp;quot;placeholder&amp;quot; src=&amp;quot;your default image path or null&amp;quot; /&amp;gt; ...   在showPic(this)中的&amp;rsquo;this’，含义是“这个对象”，在这里指“这个元素节 点。把获取到的节点通过点击事件把参数值传到javaScript中，以便使用。
javaScript
 &amp;lt;script&amp;gt; function showPic(whichpic) { var source = whichpic.getAttribute(&amp;quot;href&amp;quot;); var placeholder = document.getElementById(&amp;quot;placeholder&amp;quot;); placeholder.setAttribute(&amp;quot;src&amp;quot;, source); } &amp;lt;/script&amp;gt;   whichpic代表一个元素节点，接收来自html中this传过来的值，具体是指向某个图片 元素。通过whichpic.</description>
    </item>
    
    <item>
      <title>Odd</title>
      <link>https://leidu.github.io/blogs/odd/</link>
      <pubDate>Sun, 10 May 2020 22:29:17 +0800</pubDate>
      
      <guid>https://leidu.github.io/blogs/odd/</guid>
      <description>今天看过一片文章——完成代码，判断一个整数是否是奇数： public boolean isOdd(int i) 看到这道题，我最开始认为很简单，但就是这么一道题让我明白了一件事，我们不是一个简单的码工，而是一个思想者，学会理解事物的本质。
通过看到题目，我们很一所当然的想到，如果 i % 2 != 0时，就打印出结果——System.out.println(“i是奇数”)。其实不然，要想到这里要求返回一个boolean 值。boolean是布尔型，返回true或false。
在看后面的回答时，还要明白一个问题，取模运算和位运算的关系，这两者哪一个运行 速度更快。其实这两者的运算速度差不多，为什么。个人认为取模运算和位运算都是在进行 二进制的转换运算，而也提到了奇数和偶数转换为二进制时，奇数最后一位是1，偶数最后一 位是0，其实可以想到，取模运算在最后转换为二进制是倒排顺序，其实是使用到了栈的先进后出的原则，而位运算我认为运用了队列的先进先出的原则。
e.g 求5和6的奇数和偶数的二进制
   数值 二进制     奇数 5 101   偶数 6 110    通过对比，把数值转换为二进制，奇数和偶数相当于负数的补码，即+1操作。
REFERENCE [1] (转载) https://mp.weixin.qq.com/s/oSrLRHYxG8g13dY_jyr-Yw</description>
    </item>
    
    <item>
      <title>Change Color</title>
      <link>https://leidu.github.io/blogs/change-color/</link>
      <pubDate>Sun, 10 May 2020 22:21:59 +0800</pubDate>
      
      <guid>https://leidu.github.io/blogs/change-color/</guid>
      <description>在代码中主要用到了javaScript中的onchange事件。onchange事件可以用于input text、textarea、select option等HTML Form元素上，当元素内容改变时就触发这 个事件来执行你所写的javaScript程序。
  变背景
html
   &amp;lt;select id=&amp;quot;changeBackground&amp;quot; onchange=&amp;quot;changeBg()&amp;quot;&amp;gt; &amp;lt;option value=&amp;quot;blue&amp;quot;&amp;gt;blue&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;quot;pink&amp;quot;&amp;gt;pink&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;quot;gray&amp;quot;&amp;gt;gray&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt;  js
 &amp;lt;script&amp;gt; function changeBg(color) { var getSelectValue = document.getElementById(&amp;quot;changeBackground&amp;quot;).value; document.bgColor = getSelectValue; } &amp;lt;/script&amp;gt;    变字体颜色
html
   &amp;lt;select id=&amp;quot;changeFontColor&amp;quot; onchange=&amp;quot;changeFC(value)&amp;quot; &amp;gt; &amp;lt;option value=1&amp;gt;selete, please&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;quot;blue&amp;quot;&amp;gt;blue&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;quot;pink&amp;quot;&amp;gt;pink&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;quot;gray&amp;quot;&amp;gt;gray&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; &amp;lt;div id=&amp;quot;text&amp;quot;&amp;gt;She is my mother!&amp;lt;/div&amp;gt;  js
第一种方式，通过直接使用onchange事件来实现
 &amp;lt;script&amp;gt; function chageFC(color) { document.</description>
    </item>
    
    <item>
      <title>File</title>
      <link>https://leidu.github.io/blogs/file/</link>
      <pubDate>Sun, 10 May 2020 22:13:51 +0800</pubDate>
      
      <guid>https://leidu.github.io/blogs/file/</guid>
      <description>在JDK中，File是从1.0开始就有的，而Files和Path是JDK 1.7才出现的。　File
 来自于java.io包中，其中就有一个File类，这个类可以对文件进行读取，可以对其文件 进行创建删除和修改。　 构造函数
File(String path); 如果path是实际路径，则表示文件目录；如果path是实际文件名，则就是该对象是文件。
File(String path, String name); path表示目录，name表示文件。
File(File dir, String name); dir表示对象的路径，name表示文件名。　  Files
 来自于java.nio包中，其中就有一个Files类，这个类可以用来移除或重命名文件，或者 查询拍文件下最后被修改的时间，主要关心文件的内容。　Path
 来自于java.nio包中，其中就有一个Path类，表示一个目录名序列，其后可以跟着一个文 件名，主要关心磁盘上如何存储文件。 Path类实际一个接口类，不能被实例化，在NIO中也是通过流的方式在工作。在Paths中有一个 静态的Paths.get(String first, String&amp;hellip;more)方法接受一个或多个字符串，并将他们默认的文件系统的路径分隔符连接起 来。然后解析连接起来的结果。如果其表示的不是给定文件系统中的合法路径，就会抛出 InvaildPathException异常。而连接起来的对象就是Path。如:Path pa = Paths.get(&amp;quot;/temp”, “my.config”);
Paths方法
根据jdk1.8的源码来看，有两个方法，如下：
 方法
static Path get(String first, String… more
static Path get(URI uri)  Path方法
 Path resolve(Path other)
Path resolve(String other)
如果other是绝对路径，则返回oher；否则返回通过连接this和other连接得到的路径 Path resolveSibling(Path other)
Path resolveSibling(String other)</description>
    </item>
    
    <item>
      <title>String</title>
      <link>https://leidu.github.io/blogs/string/</link>
      <pubDate>Sun, 10 May 2020 22:05:13 +0800</pubDate>
      
      <guid>https://leidu.github.io/blogs/string/</guid>
      <description>从概念上将，Java字符串就是Unicode字符序列。e.g:串&amp;quot;Java\u2122由5个Unicode字符J a v a和TM。Java没有内置的的字符串，而是在标准Java类库中提供了一个预定义类，很自然地叫做String。每一个用引号括起来的字符串就是String类的一个实例。 在字符串中，分为不可变字符串(String)和可变字符串(StringBuffer和StringBuilder)。
String  String类在JDK API中使用final修饰的，意为不可修改类。以下是String类图。 public final class String implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence { ... }   String的创建   String str = “She is my mother”; String str2 = “She is my mother”; String str3 = new String(“She is my mother”); System.out.println(str == str2); //true System.out.println(str.equals(str2)); //true System.out.println(str == str3); //false System.out.println(str.equals(str3)); //true   通过分析，虽然str,str2,str3都是指向一个地址，但“str == str3”的值是false，可以得到一个结果，str和 str2这两个对象是在常量池中保存，而str3是通过关键字new创建的一个对象，被存放在了堆内存中，而通过equals比较时，str3被重写了，重写过后变成了值比较，如&amp;quot;str == str2&amp;rdquo;。
 System.out.println(“She is my mother, and her name” + name);   通过println()里的语句，‘+’是一个连接符，如果在一条语句里，存在字符串和‘+’ ，那么这条语句就还是字符串；如果是数值(2+3)，则这时‘+’就起算术运算。</description>
    </item>
    
    <item>
      <title>Bitwise Operators</title>
      <link>https://leidu.github.io/blogs/bitwise-operators/</link>
      <pubDate>Sun, 10 May 2020 21:43:17 +0800</pubDate>
      
      <guid>https://leidu.github.io/blogs/bitwise-operators/</guid>
      <description>位操作是程序设计中对位模式按位或二进制数的一元或二元的操作。
位运算中要注意：左边最高位是符号位，如果是正数，则最高位用0表示， 否则用1表示；如果是负数，则采用补码表示。
在计算机中由于位数的不同所引用的二进制数也不同，在现在大多是32位和64位，以下的例子中，以8位来进行实现。 但在学习位运算时，还要先了解进制等相关的知识。
进制   二进制
二进制(B)：基于为2的计数制。二进制是“逢2进1”，每一位只有0和1两种状态， 位权为2的各次幂。
  十进制
十进制(D)计数方法为“逢10进1”，一个十进制数的每一位都只有10种状态，分别 用0～9等10个数码表示。
  八进制
八进制(O)数的基数为8，进位规则为“逢8进1”，使用0~7等8个数码，位权是8的 各次幂。
  十六进制
十六进制(H)的基数是16，进位规则为“逢16进1”，使用0~9，A～F等16个数码， 位权是16的各次幂。
  二进制原码、反码、补码   原码
原码是一种计算机中对数字的二进制定点表示方法。规则：如果数值是正数，则 最高符号位是0，如果是负数，最高符号位是1，其他位不变。
  反码
规则：如果数值是正数，则反码和原码相同；如果是负数，则最高符号位是1，其 它位分别取反。
  补码
补码是计算机表示数据的一般形式，规则是如果是正数，则补码和原码一样；如 果是负数，则在反码的基础上+1。
  原码、反码、补码总结
如果所求的数值为正数，则原码、反码、补码都是相同的；如果所求的数值为负 数，则原码的符号位是1，不是0；反码符号位不变，其余位取反；补码是在反码的基础 上+1。
e.g 求8和-8的原码、反码和补码
     数值 原码 反码 补码     8 0 000 1000 0 000 1000 0 000 1000   -8 1 000 1000 1 111 0111 1 000 1001    位运算  按位与</description>
    </item>
    
    <item>
      <title>Soft Design</title>
      <link>https://leidu.github.io/blogs/soft-design/</link>
      <pubDate>Sun, 10 May 2020 21:34:16 +0800</pubDate>
      
      <guid>https://leidu.github.io/blogs/soft-design/</guid>
      <description>软件体系结构  软件体系结构产生原因
软件体系结构产生的原因是软件危机的出现。 软件危机的表现
1.软件成本日益增长
2.开发进度难以控制
3.软件质量差
4.软件维护困难
软件危机的原因
1.用户需求不明确
2.缺乏正确的理论指导
3.软件规模原来越大
4.软件复杂度越来越高 克服软件危机
主要从两方面入手，即技术和管理。  设计模式简要  软件设计模式的分类
1.创建型：类与实例化时使用的模式
2.结构型：描述类与对象怎样结合
3.行为型：设计到算法和对象职责间的分配     创建 结构 行为     类 工厂方法 适配器 解释器模板方法   对象 抽象方法 桥接 责任链　命令   生成器 组成 迭代器 中介者   原型 装饰 备忘录 观察者   单例 享元 代理 状态 策略 访问者    七大原则   单一职责原则</description>
    </item>
    
    <item>
      <title>Mysql</title>
      <link>https://leidu.github.io/blogs/mysql/</link>
      <pubDate>Sun, 10 May 2020 21:18:23 +0800</pubDate>
      
      <guid>https://leidu.github.io/blogs/mysql/</guid>
      <description>MySQL是一个开源的关系型数据库管理系统，由瑞典MySQL公司开发，属于Oracle旗下产品。
安装[^1] 下载并解压 下载   创建存放mysql文件夹
mkdir /media/universe/_dde_data/mysql
  解压并赋予权限
tar -xJvf mysql.tar.xz
  创建data文件夹和log文件夹并赋予权限
mkdir /media/universe/_dde_data/mysql/data mkdir /media/universe/_dde_data/mysql/log
  配置
创建mysql用户和组
groupadd mysql
useradd mysql
编写my.cnf配置并移到/etc目录
   [mysqld] port=3306 pid-file=/media/universe/_dde_data/mysql/data/mysqld.pid socket=/media/universe/_dde_data/mysql/data/mysql.sock log-error=/media/universe/_dde_data/mysql/log/mysqld.log basedir=/media/universe/_dde_data/mysql datadir=/media/universe/_dde_data/mysql/data [client] port=3306 socket=/media/universe/_dde_data/mysql/data/mysqld.sock  把配置文件移到其他文件下sudo mv /media/universe/_dde_data/my.cnf /etc
进行初始化 /media/universe/_dde_data/mysql/bin/mysqld --initialize --user=mysql --basedir=/media/universe/_dde_data/mysql --datadir=/media/universe/_dde_data/mysql/data
注意：如果在my.cnf里面配置了mysql的basedir和datadir不用在初始化里在写，如果写了在进行初始化的时候会报错。
测试mysql
cd mysql/bin/，执行./mysqld_safe，启动mysql初始化状态
cd mysql/support-files,执行mysql.server, 启动mysql服务
cd mysql/bin,执行./mysql -u用户名 -p密码, 进去mysql命令状态
注意：密码在开始的时候是随机生成的，在mysqld.log里可以找到，在进入mysql里面可以进行修改。
如果mysql测试能够正常使用，可以通过软连接的方式吧执行命令放到相应的文件夹下，在下次使用是直接使用相应的命令即可。 创建软连接</description>
    </item>
    
    <item>
      <title>Linux</title>
      <link>https://leidu.github.io/blogs/linux/</link>
      <pubDate>Sun, 10 May 2020 20:08:01 +0800</pubDate>
      
      <guid>https://leidu.github.io/blogs/linux/</guid>
      <description>Linux是由赫尔辛基大学的Linus Torvalds开发的，是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和Unix的多用户、 多任务、支持多线程和多CPU的操作系统。
‘$&#39;符号的使用^1    序号 变量与说明     1 $0,表示当前执行的脚本的文件名   2 $1…n,1..n对应于调用脚本的参数   3 $#,表示提供给脚本的参数数量   4 $*,所有参数都使用双括号引起来，如果脚本收到两个参数,则$*=$1 $2   5 $@,所有从参数都使用单独用双引号引起来,则$@=$1 $2   6 $?,最后执行的命令的退出状态   7 $$,当前shell的进程号   8 $!,最后一个后台命令的进程号     notify: 当$与*、@、1等组合时，要使用转义字符”\&amp;rdquo;  通配符的使用 不管在脚本语言中，还是在Java，python等语言中，正则表达式都是很重要的，而在其中，通配符的 使用也是很频繁的。
   序号 说明 例子     1 *,匹配所有字符 ls file*   2 ?</description>
    </item>
    
    <item>
      <title>Tao Te Ching</title>
      <link>https://leidu.github.io/blogs/tao-te-ching/</link>
      <pubDate>Sun, 10 May 2020 16:30:36 +0800</pubDate>
      
      <guid>https://leidu.github.io/blogs/tao-te-ching/</guid>
      <description>道可道，非常道；名可名，非常名。无名天地之始；有名万物之母。故常无欲，以观其妙；常有欲，以观其徼。此两者同出而异名，同谓之玄。玄之又玄，众妙之门。
天下皆知美之为美，斯恶已；皆知善之为善，斯不善已。故有无相生，难易相成，长短相较，高下相倾，音声相和，前后相随。是以圣人出无为之事，行不言之教；万物作焉而不辞，生而不有，为而不恃，功而弗居。夫唯弗居，是以弗去。
不尚贤，使民不争。不贵难得之货，使民不为盗。不见可欲，使民心不乱。是以圣人之治，虚其心，实其腹，弱其志，强其骨，常使民无知无欲，使夫智者不敢为也。为无为，则无不治。
道冲而用之或不盈。渊兮似万物之宗。挫其锐，解其纷，和其光，同其尘。湛兮似或存。吾不知谁为子，象帝之先。
天地不仁，以万物为刍狗。圣人不仁，以百姓为刍狗。天地之间，其犹橐龠乎？虚而不屈，动而愈出。多言数穷，不如守中。
谷神不死，是谓玄牝。玄牝之门，是谓天地根。绵绵若存，用之不勤。
天长地久。天地所以能长且久者，以其不自生，故能长生。是以圣人后其身而身先，外其身而身存。非以其无私邪！故能成其私。
上善若水。水善利万物而不争，处众人之所恶，故几于道。居善地，心善渊，与善仁，言善信，正善治，事善能，动善时。夫唯不争，故无尤。
持而盈之，不如其已，揣而锐之，不可长保。金玉满堂，莫之能守。富贵而骄，自遗其咎。功遂身退，天之道。
载营魄抱一，能无离乎？专气致柔，能婴儿乎？涤除玄览，能无疵乎？爱民治国，能无为乎？天门开阖，能为雌乎？明白四达，能无为乎？生之、畜之。生而不有，为而不恃，长而不宰。是谓玄德。
三十辐共一毂，当其无，有车之用。埏埴以为器，当其无，有器之用。凿户牖以为室，当其无，有室之用。故有之以为利，无之以为用。
五色令人目盲，五音令人耳聋，五味令人口爽，驰骋畋猎令人心发狂，难得之货令人行妨。是以圣人为腹不为目。故去彼取此。
宠辱若惊，贵大患若身。何谓宠辱若惊？宠为下，得之若惊，失之若惊，是谓宠辱若惊。何谓贵大患若身？吾所以有大患者，为吾有身。及吾无身，吾有何患？故贵以身为天下，若可寄天下。爱以身为天下，若可托天下。
视之不见名曰夷；听之不闻名曰希；搏之不得名曰微。此三者不可致诘，故混而为一。其上不皦，其下不昧。绳绳不可名，复归于无物。是谓无状之状，无物之象，是谓恍惚。迎之不见其首，随之不见其后。执古之道，以御今之有。能知古今，是谓道纪。
古之善为士者，微妙玄通，深不可识。夫唯不可识，故强为之容；豫焉若冬涉川。犹兮若畏四邻；俨兮其若客；涣兮若冰之将释；敦兮其若朴；旷兮其若谷；混兮其若浊；孰能浊以静之徐清？孰能安以久动之徐生。保此道者不欲盈。夫唯不盈，故能蔽而新成。
致虚极，守静笃。万物并作，吾以观复，夫物芸芸，各复归其根。归根曰静，是谓复命，复命曰常。知常曰明。不知常，妄作，凶。知常容，容乃公。公乃王，王乃天，天乃道，道乃久，没身不殆。
太上，下知有之。其次，亲而誉之。其次，畏之。其次，侮之。信不足焉，有不信焉。悠兮其贵言，功成事遂，百姓皆谓我自然。
大道废，有仁义，慧智出，有大伪。六亲不和，有孝慈。国家昏乱，有忠臣。
绝圣弃智，民利百倍。绝仁弃义，民复孝慈。绝巧弃利，盗贼无有。此三者，以为文不足，故令有所属，见素抱朴，少私寡欲。
绝学无忧。唯之与阿，相去几何？善之与恶，相去若何？人之所畏，不可不畏。荒兮其未央哉！众人熙熙，如享太牢，如春登台。我独泊兮其未兆。如婴儿之未孩；儽儽兮若无所归，众人皆有余，而我独若遗。我愚人之心也哉！沌沌兮！俗人昭昭，我独昏昏。俗人察察，我独闷闷。澹兮其若海，飂兮若无止。众人皆有以，而我独顽似鄙。我独异于人，而贵食母。
孔德之容，惟道是从。道之为物，惟恍惟惚。惚兮恍兮，其中有象。恍兮惚兮，其中有物。窈兮冥兮，其中有精。其精甚真，其中有信。自今及古，其名不去，以阅众甫。吾何以知众甫之状哉？以此。
曲则全，枉则直，洼则盈，敝则新，少则得，多则惑，是以圣人抱一，为天下式。不自见故明；不自是则彰；不自伐故有功；不自矜故长，夫唯不争，故天下莫能与之争。古之所谓曲则全者，岂虚言哉！诚全而归之。
希言自然，故飘风不终朝，骤雨不终日。孰为此者？天地。天地尚不能久，而况於人乎？故从事于道者，道者同于道；德者同于德；失者同于失。同于道者，道亦乐得之。同于德者，德亦乐得之。同于失者，失亦乐得之。信不足焉，有不信焉。
企者不立。跨者不行。自见者不明，自是者不彰。自伐者无功。自矜者不长。其在道也，曰余食赘行。物或恶之，故有道者不处。
有物混成，先天地生。寂兮廖兮，独立不改，周行而不殆，可以为天地母。吾不知其名，字之曰道，强为之名曰大。大曰逝，逝曰远，远曰反。故道大，天大，地大，人亦大。域中有四大，而王居其一焉。人法地，地法天，天法道，道法自然。
重为轻根，静为躁君。是以圣人终日行不离辎重。虽有荣观，燕处超然。奈何万乘之主，而以身轻天下？轻则失根，躁则失君。
善行无辙迹；善言无瑕谪；善数不用筹策；善闭无关楗而不可开；善结无绳约而不可解。是以圣人常善救人，故无弃人；常善救物，故无弃物。是谓袭明。故善人者，不善人之师；不善人者，善人之资。不贵其师，不爱其资。虽智大迷。是谓要妙。
知其雄，守其雌，为天下溪。为天下溪，常德不离，复归于婴儿。知其白，守其黑，为天下式。为天下式，常德不忒，复归于无极。知其荣，守其辱，为天下谷。为天下谷，常德乃足，复归于朴。朴散则为器，圣人用之则为官长。故大制不割。
将欲取天下而为之，吾见其不得已。天下神器，不可为也。为者败之，执者失之。故物或行或随，或嘘或吹，或强或羸，或载或隳。是以圣人去甚，去奢，去泰。
以道佐人主者，不以兵强天下。其事好还，师之所处，荆棘生焉，大军之后，必有凶年。善有果而已，不敢以取强。果而勿矜，果而勿伐，果而勿骄，果而不得已，果而勿强。物壮则老，是谓不道。不道早已。
夫佳兵者，不祥之器，物或恶之。故有道者不处。君子居则贵左，用兵则贵右。兵者，不祥之器，非君子之器。不得已而用之。恬淡为上，胜而不美。而美之者，是乐杀人。夫乐杀人者，则不可以得志于天下矣。吉事尚左，凶事尚右。偏将军居左，上将军居右，言以丧礼处之。杀人之众，以哀悲泣之。战胜，以丧礼处之。
道常无名，朴。虽小，天下莫能臣也。侯王若能守之，万物将自宾。天地相合以降甘露，民莫之令而自均。始制有名。名亦既有，夫亦将知止。知止可以不殆。譬道之在天下，犹川谷之于江海。
知人者智，自知者明，胜任者有力，自胜者强。知足者富，强行者有志。不失其所者久。死而不亡者寿。
大道泛兮，其可左右。万物恃之而生而不辞。功成不名有。衣养万物而不为主。常无欲，可名于小。万物终焉而不为主，可名为大。以其终不自为大，故能成其大。
执大象，天下往。往而不害，安平太。乐与饵，过客止。道之出口，淡乎其无味。视之不足见，听之不足闻，用之不足既。
将欲歙之，必固张之。将欲弱之，必固强之。将欲废之，必固兴之。将欲夺之，必固与之。是谓微明。柔弱胜刚强。鱼不可脱于渊，国之利器不可以示人。
道常无为而无不为，侯王若能守之，万物将自化。化而欲作，吾将镇之以无名之朴。无名之朴，夫亦将无欲。不欲以静，天下将自定。
上德不德，是以有德。下德不失德，是以无德。上德无为而无以为，下德无为而有以为。上仁为之而无以为，上义为之而有以为。上礼为之而莫之应，则攘臂而扔之。故失道而后德，失德而后仁，失仁而后义，失义而后礼。夫礼者，忠信之薄而乱之首，前识者，道之华而愚之始。是以大丈夫处其厚，不居其薄；处其实，不居其华。故去彼取此。
昔之得一者：天得一以清；地得一以宁；神得一以灵；谷得一以盈；万物得一以生；侯王得一以为天下贞。其致之，天无以清将恐裂；地无以宁将恐废；神无以灵将恐歇；谷无以盈将恐竭；万物无以生将恐灭；侯王无以贵高将恐蹶。故贵以贱为本，高以下为基。是以侯王自谓称孤寡不穀。此非以贱为本邪？非乎？故致数舆无舆，不欲琭琭如玉，珞珞如石。
反者，道之动。弱者，道之用。天下万物生于有，有生于无。
上士闻道，勤而行之；中士闻道，若存若亡；下士闻道，大笑之。不笑不足以为道。故建言有之：明道若昧；进道若退；夷道若纇；上德若谷，大白若辱；广德若不足；建德若偷，质真若渝；大方无隅；大器晚成；大音希声；大象无形；道隐无名。夫唯道善贷且成。
道生一，一生二，二生三，三生万物。万物负阴而抱阳，冲气以为和。人之所恶，唯孤寡不穀，而王公以为称。故物，或损之而益，或益之而损。人之所教，我亦教之：强梁者不得其死。吾将以为教父。
天下之至柔，驰骋天下之至坚。无有入无间，吾是已知无为之有益。不言之教，无为之益，天下希及之。 名与身孰亲？身与货孰多？得与亡孰病？是故甚爱之大费，多藏必厚亡。知足不辱，知止不殆，可以长久。
大成若缺，其用不弊。大盈若冲，其用不穷。大直若屈，大巧若拙，大辩若讷。躁胜寒，静胜热。清静为天下正。
天下有道，却走马以粪。天下无道，戎马生于郊。祸莫大于不知足，咎莫大于欲得。故知足之足，常足矣。
不出户，知天下；不窥牖，见天道。其出弥远，其知弥少。是以圣人不行而知，不见而明，不为而成。 为学日益，为道日损。损之又损，以至于无为。无为而无不为。取天下常以无事，及其有事，不足以取天下。
圣人无常心，以百姓心为心。善者，吾善之，不善者，吾亦善之，德善。信者，吾信之，不信者，吾亦信之，德信。圣人在天下歙歙；为天下浑其心。百姓皆注其耳目，圣人皆孩之。
出生入死，生之徒十有三。死之徒十有三。人之生动之死地，亦十有三。夫何故？以其生生之厚。盖闻善摄生者，陆行不遇兕虎，入军不被甲兵。兕无所投其角，虎无所措其爪，兵无所容其刃。夫何故？以其无死地。
道生之，德畜之，物形之，势成之。是以万物莫不尊道而贵德。道之尊，德之贵，夫莫之命而常自然。故道生之，徳畜之；长之，育之，亭之，毒之，养之，覆之。生而不有，为而不恃，长而不宰。是谓玄德。
天下有始，以为天下母。既得其母，以知其子。既知其子，复守其母，没身不殆。塞其兑，闭其门，终身不勤。开其兑，济其事，终身不救。见小曰明，守柔曰强。用其光，复归其明，无遗身殃。是为习常。
使我介然有知，行于大道，唯施是畏。大道甚夷，而民好径。朝甚除，田甚芜，仓甚虚。服文彩，带利剑，厌饮食，财货有余。是为盗夸。非道也哉。
善建者不拔，善抱者不脱，子孙以祭祀不辍。修之于身，其德乃真；修之于家，其德乃余；修之于乡，其德乃长；修之于国，其德乃丰；修之于天下，其德乃普。故以身观身，以家观家，以乡观乡，以国观国，以天下观天下。吾何以知天下然哉？以此。
含德之厚，比于赤子。蜂虿虺蛇不螫，猛兽不据，攫鸟不搏。骨弱筋柔而握固，未知牝牡之合而全作，精之至也。终日号而不嗄，和之至也。知和曰常，知常曰明，益生曰祥，心使气曰强。物壮则老，谓之不道，不道早以。
知者不言，言者不知。塞其兑，闭其门；挫其锐，解其纷；和其光，同其尘。是谓玄同。故不可而亲，不可得而疏；不可得而利，不可得而害；不可得而贵，不可得而贱。故为天下贵。
以正治国，以其用兵，以无事取天下。吾何以知其然哉？以此：天下多忌讳，而民弥贫；民多利器，国家滋昏；人多伎巧，奇物滋起；法令滋彰，盗贼多有。故圣人云：”我无为而民自化；我好静而民自正；我无事而民自富；我无欲而民自朴“。
其政闷闷，其民淳淳；其政察察，其民缺缺。祸兮福之所倚；福兮祸之所伏。孰知其极？其无正也，正复为奇，善复为妖。人之迷，其日固久。是以圣人方而不割，廉而不刿，直而不肆，光而不耀。
治人事天莫若啬。夫唯啬，是谓早服。早服谓之重积德；重积德则无不克；无不克则莫知其极；莫知其极，可以有国。有国之母，可以长久。是谓深根固柢，长生久视之道。
治大国若烹小鲜。以道莅天下，其鬼不神；非其鬼不神，其神不伤人；非其神不伤人，圣人亦不伤人。夫两不相伤，故德交归焉。
大国者下流，天下之交，天下之牝。牝常以静胜牡，以静为下。故大国以下小国，则取小国。小国以下大国，则取大国。故或下以取，或下而取。大国不过欲兼畜人，小国不过欲入事人。夫两者各得其所欲，大者宜为下。
道者万物之奥。善人之宝，不善人之所保。美言可以市，尊行可以加入。人之不善，何弃之有？故立天子，置三公。虽有拱璧以先驷马，不如坐进此道。古之所以贵此道者何？不曰以求得，有罪以免邪？故为天下贵。
为无为，事无事，味无味。大小多少，报怨以德。图难于其易，为大于其细。天下难事必作于易；天下大事必作于细。是以圣人终不为大，故能成其大。夫轻诺必寡信，多易必多难。是以圣人犹难之，故终无难矣。
其安易持，其未兆易谋。其脆易泮，其微易散。为之于未有，治之于未乱。合抱之木，生于毫末；九层之台，起于累土；千里之行，始于足下；为者败之，执者失之。是以圣人无为，故无败。无执，故无失。民之从事，常于几成而败之。不慎终也。慎终如始，则无败事。是以圣人欲不欲，不贵难得之货；学不学，复众人之所过。以辅万物之自然，而不敢为。
古之善者为道者，非以明民，将以愚之。民之难治，以其智多。故以智治国，国之贼；不以智治国，国之福。知此两者，亦稽式。常知稽式，是谓玄德。玄德深矣，远矣，与物反矣，然后乃至大顺。
江海之所以能位百谷王者，以其善下之，故能为百谷王。是以欲上民，必以言下之；欲先民，必以身后之。是以圣人处上而民不重，处前而民不害。是以天下乐推而不厌。以其不争，故天下莫能与之争。
天下皆谓我道大，似不肖。夫唯大，故似不肖。若肖，久矣其细也夫！我有三宝，持而保之：一曰慈，二曰俭，三曰不敢为天下先。慈，故能勇，俭，故能广。不敢为天下先，故能成器长。今舍慈且勇，舍俭且广，舍后且先，死矣。夫慈，以战则胜，以守则固。天将救之，以慈卫之。
善为士者不武；善战者不怒；善胜敌者不与；善用人者为天下。是谓不争之德，是谓用人之力，是谓配天古之极。
用兵有言，吾不敢为主而为客；不敢进寸而退尺。是谓行无行，攘无臂，仍无敌，执无兵。祸莫大于轻敌，轻敌几丧吾宝。故抗兵相若，哀者胜矣。</description>
    </item>
    
  </channel>
</rss>