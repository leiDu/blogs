<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>I/O on Universe</title>
    <link>https://leidu.github.io/blogs/tags/i/o/</link>
    <description>Recent content in I/O on Universe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://leidu.github.io/blogs/tags/i/o/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>File</title>
      <link>https://leidu.github.io/blogs/file/</link>
      <pubDate>Sun, 10 May 2020 22:13:51 +0800</pubDate>
      
      <guid>https://leidu.github.io/blogs/file/</guid>
      <description>在JDK中，File是从1.0开始就有的，而Files和Path是JDK 1.7才出现的。　File
 来自于java.io包中，其中就有一个File类，这个类可以对文件进行读取，可以对其文件 进行创建删除和修改。　 构造函数
File(String path); 如果path是实际路径，则表示文件目录；如果path是实际文件名，则就是该对象是文件。
File(String path, String name); path表示目录，name表示文件。
File(File dir, String name); dir表示对象的路径，name表示文件名。　  Files
 来自于java.nio包中，其中就有一个Files类，这个类可以用来移除或重命名文件，或者 查询拍文件下最后被修改的时间，主要关心文件的内容。　Path
 来自于java.nio包中，其中就有一个Path类，表示一个目录名序列，其后可以跟着一个文 件名，主要关心磁盘上如何存储文件。 Path类实际一个接口类，不能被实例化，在NIO中也是通过流的方式在工作。在Paths中有一个 静态的Paths.get(String first, String&amp;hellip;more)方法接受一个或多个字符串，并将他们默认的文件系统的路径分隔符连接起 来。然后解析连接起来的结果。如果其表示的不是给定文件系统中的合法路径，就会抛出 InvaildPathException异常。而连接起来的对象就是Path。如:Path pa = Paths.get(&amp;quot;/temp”, “my.config”);
Paths方法
根据jdk1.8的源码来看，有两个方法，如下：
 方法
static Path get(String first, String… more
static Path get(URI uri)  Path方法
 Path resolve(Path other)
Path resolve(String other)
如果other是绝对路径，则返回oher；否则返回通过连接this和other连接得到的路径 Path resolveSibling(Path other)
Path resolveSibling(String other)</description>
    </item>
    
  </channel>
</rss>