<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>String on Universe</title>
    <link>https://leidu.github.io/blogs/tags/string/</link>
    <description>Recent content in String on Universe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 May 2020 22:05:13 +0800</lastBuildDate>
    
	<atom:link href="https://leidu.github.io/blogs/tags/string/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>String</title>
      <link>https://leidu.github.io/blogs/string/</link>
      <pubDate>Sun, 10 May 2020 22:05:13 +0800</pubDate>
      
      <guid>https://leidu.github.io/blogs/string/</guid>
      <description>从概念上将，Java字符串就是Unicode字符序列。e.g:串&amp;quot;Java\u2122由5个Unicode字符J a v a和TM。Java没有内置的的字符串，而是在标准Java类库中提供了一个预定义类，很自然地叫做String。每一个用引号括起来的字符串就是String类的一个实例。 在字符串中，分为不可变字符串(String)和可变字符串(StringBuffer和StringBuilder)。
String  String类在JDK API中使用final修饰的，意为不可修改类。以下是String类图。 public final class String implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence { ... }   String的创建   String str = “She is my mother”; String str2 = “She is my mother”; String str3 = new String(“She is my mother”); System.out.println(str == str2); //true System.out.println(str.equals(str2)); //true System.out.println(str == str3); //false System.out.println(str.equals(str3)); //true   通过分析，虽然str,str2,str3都是指向一个地址，但“str == str3”的值是false，可以得到一个结果，str和 str2这两个对象是在常量池中保存，而str3是通过关键字new创建的一个对象，被存放在了堆内存中，而通过equals比较时，str3被重写了，重写过后变成了值比较，如&amp;quot;str == str2&amp;rdquo;。
 System.out.println(“She is my mother, and her name” + name);   通过println()里的语句，‘+’是一个连接符，如果在一条语句里，存在字符串和‘+’ ，那么这条语句就还是字符串；如果是数值(2+3)，则这时‘+’就起算术运算。</description>
    </item>
    
  </channel>
</rss>