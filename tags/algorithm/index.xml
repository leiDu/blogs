<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on Universe</title>
    <link>https://leidu.github.io/blogs/tags/algorithm/</link>
    <description>Recent content in algorithm on Universe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Jun 2020 21:28:09 +0800</lastBuildDate>
    
	<atom:link href="https://leidu.github.io/blogs/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ReplacementAlgorithm</title>
      <link>https://leidu.github.io/blogs/replacementalgorithm/</link>
      <pubDate>Sun, 28 Jun 2020 21:28:09 +0800</pubDate>
      
      <guid>https://leidu.github.io/blogs/replacementalgorithm/</guid>
      <description>引言  进程运行时，若其所要访问的页面不在内存，而需把他们调入内存，但内存已无空闲空间时，为了保证该进程能正常运行，系统必须从内存中调出一页程序和数据送到磁盘的对换区中。这种把选择换出页面的算法称为页面置换算法。
例子  要求使用最佳置换算法，先进先出算法，最近最久置换算法求解置换次数和缺页中断(使用的是三个物理块)
                           7 0 1 2 0 3 0 4 2 3 0 3 2 1 2 0 1 7 0 1    最佳置换算法(Optimal)  这是一种理论上的算法。思想：选择的被淘汰页面是以后永远不使用的，或在很长一段时间内不在被访问的页面。强调未来性。
优点：保证获得最低的缺页率。
缺点：由于未来是不可确定的，造成了一个进程在内存的若干个页面中，哪一个页面是未来最长时间不再被访问的，这是不可预知的，但可以通过该算法去评估其他算法。
解:
                           7 7 7 2  2  2   2   2    7      0 0 0  0  4   0   0    0       1 1  3  3   3   1    1      解法:由于有三个物理块，可以放入三个页面。第一个物理块放入7，第二个物理块放入0，第三个物理块放入1，这时物理块中已没有多余的空间放入页面2，所以需要置换出页面。根据最佳置换算法的思想，置换出以后永远不使用的或很长一段时间不使用的页面。通过查找7,0,1在以后使用的情况来比较分析，7在第18次访问时调入内存中，0在第4次访问时时调入内存，而1则在第12次时访问调入内存，所以得到7在很长一段时间不会使用，把7置换出去，把2调入内存。如果所置换的页面在内存中存在则不进行置换。</description>
    </item>
    
  </channel>
</rss>