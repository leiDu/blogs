<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>odd on Universe</title>
    <link>https://leidu.github.io/blogs/tags/odd/</link>
    <description>Recent content in odd on Universe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 May 2020 22:29:17 +0800</lastBuildDate>
    
	<atom:link href="https://leidu.github.io/blogs/tags/odd/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Odd</title>
      <link>https://leidu.github.io/blogs/odd/</link>
      <pubDate>Sun, 10 May 2020 22:29:17 +0800</pubDate>
      
      <guid>https://leidu.github.io/blogs/odd/</guid>
      <description>今天看过一片文章——完成代码，判断一个整数是否是奇数： public boolean isOdd(int i) 看到这道题，我最开始认为很简单，但就是这么一道题让我明白了一件事，我们不是一个简单的码工，而是一个思想者，学会理解事物的本质。
通过看到题目，我们很一所当然的想到，如果 i % 2 != 0时，就打印出结果——System.out.println(“i是奇数”)。其实不然，要想到这里要求返回一个boolean 值。boolean是布尔型，返回true或false。
在看后面的回答时，还要明白一个问题，取模运算和位运算的关系，这两者哪一个运行 速度更快。其实这两者的运算速度差不多，为什么。个人认为取模运算和位运算都是在进行 二进制的转换运算，而也提到了奇数和偶数转换为二进制时，奇数最后一位是1，偶数最后一 位是0，其实可以想到，取模运算在最后转换为二进制是倒排顺序，其实是使用到了栈的先进后出的原则，而位运算我认为运用了队列的先进先出的原则。
e.g 求5和6的奇数和偶数的二进制
   数值 二进制     奇数 5 101   偶数 6 110    通过对比，把数值转换为二进制，奇数和偶数相当于负数的补码，即+1操作。
REFERENCE [1] (转载) https://mp.weixin.qq.com/s/oSrLRHYxG8g13dY_jyr-Yw</description>
    </item>
    
  </channel>
</rss>